--1. Bang CSO.CIC_RB06_DUNO_THETD
CREATE OR REPLACE PROCEDURE CIC_RB06_DUNO_THETD_LANVH (IN start_date DATE, IN end_date DATE)
LANGUAGE SQL
BEGIN
   -- Drop the global temporary table if it exists
DROP TABLE IF EXISTS SESSION.tmp_rb_dnttd;


DECLARE GLOBAL TEMPORARY TABLE SESSION.tmp_rb_dnttd 
(RPT_DT DATE, MSPHIEU VARCHAR(20), MA_CIC VARCHAR(50), CC_TCTD VARCHAR(50), CC_COUNT DECIMAL(18, 2), CC_LIMIT DECIMAL(18, 2)
, CC_PAYMENT_AMOUNT DECIMAL(18, 2), CC_OVERDUE_AMOUNT DECIMAL(18, 2), CC_OVERDUE_DAYS DECIMAL(18, 2), CC_OS DECIMAL(18, 2)) WITH REPLACE ON
COMMIT PRESERVE ROWS;

-- Map them TONG_DU_NO
INSERT INTO   SESSION.tmp_rb_dnttd
SELECT DISTINCT 
   TO_DATE(a.RPT_DT, 'YYYYMMDD') AS RPT_DT, a.MSPHIEU, a.MA_CIC, COUNT(*) OVER (PARTITION BY a.RPT_DT, a.MA_CIC, a.MSPHIEU, a.MA_TCTD) AS CC_TCTD,
--a.MA_TCTD,
   COALESCE(CAST(a.SOLUONG_THETD AS DECIMAL(18, 2)), 0.0) AS CC_COUNT, COALESCE(CAST(a.HANMUC_THETD AS DECIMAL(18, 2)), 0.0) AS CC_LIMIT, COALESCE(CAST(a.SOTIEN_PHAITT AS DECIMAL(18, 2)), 0.0) AS CC_PAYMENT_AMOUNT, COALESCE(CAST(a.SOTIEN_CHAMTT AS DECIMAL(18, 2)), 0.0) AS CC_OVERDUE_AMOUNT, COALESCE(CAST(a.SONGAY_CHAMTT AS DECIMAL(18, 2)), 0.0) AS CC_OVERDUE_DAYS, COALESCE(CAST(b.DUNOTHE AS DECIMAL(18, 2)), 0.0) AS CC_OS
FROM CSO.CIC_RB06_DUNO_THETD a
LEFT JOIN CSO.CIC_RB06_DUNO_12M b
ON
a.RPT_DT = b.RPT_DT
AND a.MSPHIEU = b.MSPHIEU
AND a.MA_CIC = b.MA_CIC
WHERE TO_DATE(a.RPT_DT, 'YYYYMMDD') BETWEEN start_date AND end_date;

-- Tinh count, ratio KH co the, TCTD,...
DROP TABLE IF EXISTS SESSION.tmp_CIC_RB06_DUNO_THETD;


DECLARE GLOBAL TEMPORARY TABLE SESSION.tmp_CIC_RB06_DUNO_THETD AS (WITH TEMP AS (
   SELECT RPT_DT, MA_CIC, MSPHIEU,
--MA_TCTD,
--COUNT(*) OVER (PARTITION BY RPT_DT, MA_CIC, MA_TCTD) AS CC_TCTD,
CC_TCTD, CC_COUNT, CC_OS, CC_LIMIT, CC_PAYMENT_AMOUNT, CC_OVERDUE_AMOUNT, CC_OVERDUE_DAYS,
--AVG(CC_OS) OVER (PARTITION BY RPT_DT, MA_CIC, MA_TCTD) AS CC_OS_AVG_BY_TCTD,
AVG(CC_OS) OVER (PARTITION BY RPT_DT, MA_CIC, MSPHIEU, CC_TCTD) AS CC_OS_AVG_BY_TCTD, AVG(CC_OS) OVER (PARTITION BY RPT_DT, MA_CIC, MSPHIEU, CC_COUNT) AS CC_OS_AVG_BY_CARD, SUM(CASE WHEN CC_OVERDUE_DAYS = 0 THEN 1 ELSE 0 END) OVER (PARTITION BY RPT_DT, MA_CIC, MSPHIEU) / 
           NULLIF(CC_TCTD, 0) AS CC_TCTD_NORM_RATIO, SUM(CASE WHEN CC_OVERDUE_DAYS = 0 THEN 1 ELSE 0 END) OVER (PARTITION BY RPT_DT, MA_CIC, MSPHIEU) / 
           NULLIF(CC_COUNT, 0) AS CC_COUNT_NORM_RATIO, SUM(CASE WHEN CC_OVERDUE_DAYS = 0 THEN CC_OS ELSE 0 END) OVER (PARTITION BY RPT_DT, MA_CIC, MSPHIEU) / 
           NULLIF(SUM(CC_OS) OVER (PARTITION BY RPT_DT, MA_CIC, MSPHIEU), 0) AS CC_OS_NORM_RATIO, SUM(CASE WHEN CC_OVERDUE_DAYS = 0 THEN CC_LIMIT ELSE 0 END) OVER (PARTITION BY RPT_DT, MA_CIC, MSPHIEU) / 
           NULLIF(SUM(CC_LIMIT) OVER (PARTITION BY RPT_DT, MA_CIC, MSPHIEU), 0) AS CC_LIMIT_NORM_RATIO
FROM SESSION.tmp_rb_dnttd
)
-- Tinh sum, min, max, avg
SELECT RPT_DT, MA_CIC, MSPHIEU, CC_TCTD, CC_COUNT, CC_OS_AVG_BY_TCTD, CC_OS_AVG_BY_CARD, CC_TCTD_NORM_RATIO, CC_COUNT_NORM_RATIO, CC_OS_NORM_RATIO, CC_LIMIT_NORM_RATIO, SUM(CC_OS) AS CC_OS_SUM, MIN(CC_OS) AS CC_OS_MIN, MAX(CC_OS) AS CC_OS_MAX, AVG(CC_OS) AS CC_OS_AVG, SUM(CC_LIMIT) AS CC_LIMIT_SUM, MIN(CC_LIMIT) AS CC_LIMIT_MIN, MAX(CC_LIMIT) AS CC_LIMIT_MAX, AVG(CC_LIMIT) AS CC_LIMIT_AVG, SUM(CC_PAYMENT_AMOUNT) AS CC_PAYMENT_AMOUNT_SUM, MIN(CC_PAYMENT_AMOUNT) AS CC_PAYMENT_AMOUNT_MIN, MAX(CC_PAYMENT_AMOUNT) AS CC_PAYMENT_AMOUNT_MAX, AVG(CC_PAYMENT_AMOUNT) AS CC_PAYMENT_AMOUNT_AVG, SUM(CC_OVERDUE_AMOUNT) AS CC_OVERDUE_AMOUNT_SUM, MIN(CC_OVERDUE_AMOUNT) AS CC_OVERDUE_AMOUNT_MIN, MAX(CC_OVERDUE_AMOUNT) AS CC_OVERDUE_AMOUNT_MAX, AVG(CC_OVERDUE_AMOUNT) AS CC_OVERDUE_AMOUNT_AVG, SUM(CC_OVERDUE_DAYS) AS CC_OVERDUE_DAYS_SUM, MIN(CC_OVERDUE_DAYS) AS CC_OVERDUE_DAYS_MIN, MAX(CC_OVERDUE_DAYS) AS CC_OVERDUE_DAYS_MAX, AVG(CC_OVERDUE_DAYS) AS CC_OVERDUE_DAYS_AVG
FROM TEMP
GROUP BY RPT_DT, MA_CIC, MSPHIEU, CC_TCTD, CC_COUNT, CC_OS_AVG_BY_TCTD, CC_OS_AVG_BY_CARD, CC_TCTD_NORM_RATIO, CC_COUNT_NORM_RATIO, CC_OS_NORM_RATIO, CC_LIMIT_NORM_RATIO)
WITH DATA ORGANIZE BY ROW;


UPDATE TPBRM1.CIC_FEATURE_STORE_KHCN x
SET 	x.CC_COUNT = y.CC_COUNT
	, x.CC_OS_SUM = y.CC_OS_SUM
	, x.CC_OS_MIN = y.CC_OS_MIN
	, x.CC_OS_MAX = y.CC_OS_MAX
	, x.CC_OS_AVG_BY_TCTD = y.CC_OS_AVG_BY_TCTD
	, x.CC_OS_AVG_BY_CARD = y.CC_OS_AVG_BY_CARD
	, x.CC_LIMIT_SUM = y.CC_LIMIT_SUM
	, x.CC_LIMIT_MIN = y.CC_LIMIT_MIN
	, x.CC_LIMIT_MAX = y.CC_LIMIT_MAX
	, x.CC_LIMIT_AVG = y.CC_LIMIT_AVG
	, x.CC_PAYMENT_AMOUNT_SUM = y.CC_PAYMENT_AMOUNT_SUM
	, x.CC_PAYMENT_AMOUNT_MIN = y.CC_PAYMENT_AMOUNT_MIN
	, x.CC_PAYMENT_AMOUNT_MAX = y.CC_PAYMENT_AMOUNT_MAX
	, x.CC_PAYMENT_AMOUNT_AVG = y.CC_PAYMENT_AMOUNT_AVG
	, x.CC_OVERDUE_AMOUNT_SUM = y.CC_OVERDUE_AMOUNT_SUM
	, x.CC_OVERDUE_AMOUNT_MIN = y.CC_OVERDUE_AMOUNT_MIN
	, x.CC_OVERDUE_AMOUNT_MAX = y.CC_OVERDUE_AMOUNT_MAX
	, x.CC_OVERDUE_AMOUNT_AVG = y.CC_OVERDUE_AMOUNT_AVG
	, x.CC_OVERDUE_DAYS_SUM = y.CC_OVERDUE_DAYS_SUM
	, x.CC_OVERDUE_DAYS_MIN = y.CC_OVERDUE_DAYS_MIN
	, x.CC_OVERDUE_DAYS_MAX = y.CC_OVERDUE_DAYS_MAX
	, x.CC_OVERDUE_DAYS_AVG = y.CC_OVERDUE_DAYS_AVG
	, x.CC_TCTD_NORM_RATIO = y.CC_TCTD_NORM_RATIO
	, x.CC_COUNT_NORM_RATIO = y.CC_COUNT_NORM_RATIO
	, x.CC_OS_NORM_RATIO = y.CC_OS_NORM_RATIO
	, x.CC_LIMIT_NORM_RATIO = y.CC_LIMIT_NORM_RATIO
FROM SESSION.tmp_CIC_RB06_DUNO_THETD y
WHERE x.RPT_DT = y.RPT_DT
AND x.MSPHIEU = y.MSPHIEU
AND x.MA_CIC = y.MA_CIC;

-- CLEAR TMP
DROP TABLE IF EXISTS SESSION.tmp_rb_dnttd;


DROP TABLE IF EXISTS SESSION.tmp_CIC_RB06_DUNO_THETD;


COMMIT;

END