/*
 * Author: BinhNN2
 * Database: DB2
 * Project: CIC LONGLIST
 * PRIMARY KEY: RPT_DT, MSPHIEU, MA_CIC
 * First date: 2023-11-24
 * Update: 2024/07: change DATE_MSP to RPT_DT -- TO_DATE(SUBSTR(MSPHIEU, 4, 6), 'YYMMDD')  AS DATE_MSP,
 		   2024/07: add start_date, end_date
 */

CREATE OR REPLACE PROCEDURE CIC_RB06_DUNO_THETD(
    IN start_date DATE,
    IN end_date DATE
)
LANGUAGE SQL
BEGIN
    -- Ignore table not found error
    DECLARE CONTINUE HANDLER FOR SQLSTATE '42704' BEGIN END; 

    -- Drop and create the temporary table for han muc filter date
    DROP TABLE IF EXISTS SESSION.tmp_han_muc_filter_date;

    DECLARE GLOBAL TEMPORARY TABLE SESSION.tmp_han_muc_filter_date (
        RPT_DT DATE,
        MSPHIEU VARCHAR(50),
        MA_CIC VARCHAR(50),
        NGAY_BAOCAO VARCHAR(50),
        MA_TCTD VARCHAR(50),
        TEN_TCTD VARCHAR(300),
        HANMUC_THETD DECIMAL(18, 2)
    ) WITH REPLACE ON COMMIT PRESERVE ROWS;

    -- Insert data into the tmp_han_muc_filter_date temporary table
    INSERT INTO SESSION.tmp_han_muc_filter_date
    SELECT DISTINCT 
        RPT_DT,
        MSPHIEU,
        MA_CIC,
        NGAY_BAOCAO,
        MA_TCTD,
        TEN_TCTD,
        COALESCE(CAST(HANMUC_THETD AS DECIMAL(18, 2)), 0.0) AS HANMUC_THETD
    FROM
        CSO.CIC_RB06_DUNO_THETD
    WHERE TO_DATE(RPT_DT, 'YYYYMMDD') BETWEEN start_date AND end_date;

    -- Create the tmp_han_muc temporary table
    DECLARE GLOBAL TEMPORARY TABLE SESSION.tmp_han_muc AS (
        SELECT 
            RPT_DT, 
            MSPHIEU, 
            MA_CIC,
            SUM(HANMUC_THETD) AS HANMUC_THETD
        FROM SESSION.tmp_han_muc_filter_date
        GROUP BY RPT_DT, MSPHIEU, MA_CIC
    ) WITH DATA ON COMMIT PRESERVE ROWS;

    -- Drop and create the temporary table for du no
    DROP TABLE IF EXISTS SESSION.tmp_du_no_filter_date;

    DECLARE GLOBAL TEMPORARY TABLE SESSION.tmp_du_no_filter_date (
        RPT_DT DATE,
        MSPHIEU VARCHAR(50),
        MA_CIC VARCHAR(50),
        THANG DATE,
        DUNOTHE DECIMAL(18, 2)
    ) WITH REPLACE ON COMMIT PRESERVE ROWS;

    -- Insert data into the tmp_du_no temporary table
    INSERT INTO SESSION.tmp_du_no_filter_date
    WITH uniq_all AS (
        SELECT DISTINCT 
            RPT_DT,
            MSPHIEU,
            MA_CIC,
            TO_DATE(THANG, 'YYYYMM') AS THANG,    
            COALESCE(CAST(DUNOTHE AS DECIMAL(18, 2)), 0.0) AS DUNOTHE
        FROM
            CSO.CIC_RB06_DUNO_12M 
        WHERE TO_DATE(RPT_DT, 'YYYYMMDD') BETWEEN start_date AND end_date
    )
    SELECT 
        RPT_DT, 
        MSPHIEU, 
        MA_CIC,
        THANG,
        SUM(DUNOTHE) AS DUNOTHE
    FROM uniq_all
    GROUP BY RPT_DT, MSPHIEU, MA_CIC, THANG;

-- Create the tmp_du_no temporary table with additional calculations
    DECLARE GLOBAL TEMPORARY TABLE SESSION.tmp_du_no AS (
        WITH tbl AS (
            SELECT *, 
                ROW_NUMBER() OVER (PARTITION BY RPT_DT, MSPHIEU, MA_CIC ORDER BY THANG) AS RN,
                MIN(DUNOTHE) OVER (PARTITION BY RPT_DT, MSPHIEU, MA_CIC ORDER BY THANG ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS MIN_DUNOTHE_L3M,
                MIN(DUNOTHE) OVER (PARTITION BY RPT_DT, MSPHIEU, MA_CIC ORDER BY THANG ROWS BETWEEN 5 PRECEDING AND CURRENT ROW) AS MIN_DUNOTHE_L6M,
                MIN(DUNOTHE) OVER (PARTITION BY RPT_DT, MSPHIEU, MA_CIC ORDER BY THANG ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) AS MIN_DUNOTHE_L12M,
                MAX(DUNOTHE) OVER (PARTITION BY RPT_DT, MSPHIEU, MA_CIC ORDER BY THANG ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS MAX_DUNOTHE_L3M,
                MAX(DUNOTHE) OVER (PARTITION BY RPT_DT, MSPHIEU, MA_CIC ORDER BY THANG ROWS BETWEEN 5 PRECEDING AND CURRENT ROW) AS MAX_DUNOTHE_L6M,
                MAX(DUNOTHE) OVER (PARTITION BY RPT_DT, MSPHIEU, MA_CIC ORDER BY THANG ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) AS MAX_DUNOTHE_L12M,
                AVG(DUNOTHE) OVER (PARTITION BY RPT_DT, MSPHIEU, MA_CIC ORDER BY THANG ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS AVG_DUNOTHE_L3M,
                AVG(DUNOTHE) OVER (PARTITION BY RPT_DT, MSPHIEU, MA_CIC ORDER BY THANG ROWS BETWEEN 5 PRECEDING AND CURRENT ROW) AS AVG_DUNOTHE_L6M,
                AVG(DUNOTHE) OVER (PARTITION BY RPT_DT, MSPHIEU, MA_CIC ORDER BY THANG ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) AS AVG_DUNOTHE_L12M
            FROM SESSION.tmp_du_no_filter_date
        )
        SELECT * FROM tbl WHERE rn = 12
    ) WITH DATA ON COMMIT PRESERVE ROWS;

    -- Drop and create the temporary table for du no 12m
    DROP TABLE IF EXISTS SESSION.tmp_du_no_12m;

    DECLARE GLOBAL TEMPORARY TABLE SESSION.tmp_du_no_12m AS (
        WITH tbl AS (
            SELECT *, 
                ROW_NUMBER() OVER (PARTITION BY RPT_DT, MSPHIEU, MA_CIC ORDER BY THANG) AS RN
            FROM SESSION.tmp_du_no_filter_date
        )
        SELECT * FROM tbl WHERE rn <= 12
    ) WITH DATA ON COMMIT PRESERVE ROWS;


--------------------------------------------------------------
-- JOIN
DROP TABLE IF EXISTS SESSION.tmp_ur;

DECLARE GLOBAL TEMPORARY TABLE SESSION.tmp_ur AS (
SELECT a.RPT_DT
,a.MSPHIEU
,a.MA_CIC
,a.MIN_DUNOTHE_L3M /NULLIF(b.HANMUC_THETD,0) AS CC_UTILIZATION_RATE_MIN_L3M
,a.MIN_DUNOTHE_L6M /NULLIF(b.HANMUC_THETD,0) AS CC_UTILIZATION_RATE_MIN_L6M
,a.MIN_DUNOTHE_L12M/NULLIF(b.HANMUC_THETD,0) AS CC_UTILIZATION_RATE_MIN_L12M
,a.MAX_DUNOTHE_L3M /NULLIF(b.HANMUC_THETD,0) AS CC_UTILIZATION_RATE_MAX_L3M
,a.MAX_DUNOTHE_L6M /NULLIF(b.HANMUC_THETD,0) AS CC_UTILIZATION_RATE_MAX_L6M
,a.MAX_DUNOTHE_L12M/NULLIF(b.HANMUC_THETD,0) AS CC_UTILIZATION_RATE_MAX_L12M
,a.AVG_DUNOTHE_L3M /NULLIF(b.HANMUC_THETD,0) AS CC_UTILIZATION_RATE_AVG_L3M
,a.AVG_DUNOTHE_L6M /NULLIF(b.HANMUC_THETD,0) AS CC_UTILIZATION_RATE_AVG_L6M
,a.AVG_DUNOTHE_L12M/NULLIF(b.HANMUC_THETD,0) AS CC_UTILIZATION_RATE_AVG_L12M
FROM SESSION.tmp_du_no a
JOIN SESSION.tmp_han_muc B 
ON (a.RPT_DT = b.RPT_DT AND a.MSPHIEU = b.MSPHIEU AND a.MA_CIC = b.MA_CIC)
) WITH DATA ;

UPDATE TPBRM1.CIC_FEATURE_STORE_KHCN x
SET 
x.CC_UTILIZATION_RATE_MIN_L3M  = y.CC_UTILIZATION_RATE_MIN_L3M  
,x.CC_UTILIZATION_RATE_MIN_L6M = y.CC_UTILIZATION_RATE_MIN_L6M  
,x.CC_UTILIZATION_RATE_MIN_L12M= y.CC_UTILIZATION_RATE_MIN_L12M 
,x.CC_UTILIZATION_RATE_MAX_L3M = y.CC_UTILIZATION_RATE_MAX_L3M  
,x.CC_UTILIZATION_RATE_MAX_L6M = y.CC_UTILIZATION_RATE_MAX_L6M  
,x.CC_UTILIZATION_RATE_MAX_L12M= y.CC_UTILIZATION_RATE_MAX_L12M 
,x.CC_UTILIZATION_RATE_AVG_L3M = y.CC_UTILIZATION_RATE_AVG_L3M  
,x.CC_UTILIZATION_RATE_AVG_L6M = y.CC_UTILIZATION_RATE_AVG_L6M  
,x.CC_UTILIZATION_RATE_AVG_L12M= y.CC_UTILIZATION_RATE_AVG_L12M
FROM SESSION.tmp_ur y
WHERE x.RPT_DT = y.RPT_DT AND x.MSPHIEU = y.MSPHIEU AND x.MA_CIC = y.MA_CIC;
     
DROP TABLE IF EXISTS SESSION.tmp_ur_12m; 
DECLARE GLOBAL TEMPORARY TABLE SESSION.tmp_ur_12m AS (  
WITH ur AS (  
	SELECT a.RPT_DT
	,a.MSPHIEU
	,a.MA_CIC
	,a.THANG
	,a.rn
	,a.DUNOTHE/NULLIF(b.HANMUC_THETD,0) AS ur
FROM SESSION.tmp_du_no_12m a
JOIN SESSION.tmp_han_muc b
ON (a.RPT_DT = b.RPT_DT AND a.MSPHIEU = b.MSPHIEU AND a.MA_CIC = b.MA_CIC)
)
SELECT RPT_DT
,MSPHIEU
,MA_CIC
,sum(CASE WHEN ur >= 0.25 AND rn >= 10 THEN 1 ELSE 0 end) CC_UR_GREATER_THAN_PER_MONTHS_25_L3M
,sum(CASE WHEN ur >= 0.25 AND rn >= 7  THEN 1 ELSE 0 end) CC_UR_GREATER_THAN_PER_MONTHS_25_L6M
,sum(CASE WHEN ur >= 0.25   		   THEN 1 ELSE 0 end) CC_UR_GREATER_THAN_PER_MONTHS_25_L12M
,sum(CASE WHEN ur >= 0.5  AND rn >= 10 THEN 1 ELSE 0 end) CC_UR_GREATER_THAN_PER_MONTHS_50_L3M
,sum(CASE WHEN ur >= 0.5  AND rn >= 7  THEN 1 ELSE 0 end) CC_UR_GREATER_THAN_PER_MONTHS_50_L6M
,sum(CASE WHEN ur >= 0.5   		       THEN 1 ELSE 0 end) CC_UR_GREATER_THAN_PER_MONTHS_50_L12M
,sum(CASE WHEN ur >= 0.75 AND rn >= 10 THEN 1 ELSE 0 end) CC_UR_GREATER_THAN_PER_MONTHS_75_L3M
,sum(CASE WHEN ur >= 0.75 AND rn >= 7  THEN 1 ELSE 0 end) CC_UR_GREATER_THAN_PER_MONTHS_75_L6M
,sum(CASE WHEN ur >= 0.75   		   THEN 1 ELSE 0 end) CC_UR_GREATER_THAN_PER_MONTHS_75_L12M
,sum(CASE WHEN ur >= 1 	  AND rn >= 10 THEN 1 ELSE 0 end) CC_UR_GREATER_THAN_PER_MONTHS_100_L3M
,sum(CASE WHEN ur >= 1 	  AND rn >= 7  THEN 1 ELSE 0 end) CC_UR_GREATER_THAN_PER_MONTHS_100_L6M
,sum(CASE WHEN ur >= 1   		       THEN 1 ELSE 0 end) CC_UR_GREATER_THAN_PER_MONTHS_100_L12M
,sum(CASE WHEN ur < 0.25  AND rn >= 10 THEN 1 ELSE 0 end) CC_UR_LESS_THAN_PER_MONTHS_25_L3M
,sum(CASE WHEN ur < 0.25  AND rn >= 7  THEN 1 ELSE 0 end) CC_UR_LESS_THAN_PER_MONTHS_25_L6M
,sum(CASE WHEN ur < 0.25   		       THEN 1 ELSE 0 end) CC_UR_LESS_THAN_PER_MONTHS_25_L12M
,sum(CASE WHEN ur < 0.5   AND rn >= 10 THEN 1 ELSE 0 end) CC_UR_LESS_THAN_PER_MONTHS_50_L3M
,sum(CASE WHEN ur < 0.5   AND rn >= 7  THEN 1 ELSE 0 end) CC_UR_LESS_THAN_PER_MONTHS_50_L6M
,sum(CASE WHEN ur < 0.5   		       THEN 1 ELSE 0 end) CC_UR_LESS_THAN_PER_MONTHS_50_L12M
,sum(CASE WHEN ur < 0.75  AND rn >= 10 THEN 1 ELSE 0 end) CC_UR_LESS_THAN_PER_MONTHS_75_L3M
,sum(CASE WHEN ur < 0.75  AND rn >= 7  THEN 1 ELSE 0 end) CC_UR_LESS_THAN_PER_MONTHS_75_L6M
,sum(CASE WHEN ur < 0.75   		       THEN 1 ELSE 0 end) CC_UR_LESS_THAN_PER_MONTHS_75_L12M
,sum(CASE WHEN ur < 1 	  AND rn >= 10 THEN 1 ELSE 0 end) CC_UR_LESS_THAN_PER_MONTHS_100_L3M
,sum(CASE WHEN ur < 1 	  AND rn >= 7  THEN 1 ELSE 0 end) CC_UR_LESS_THAN_PER_MONTHS_100_L6M
,sum(CASE WHEN ur < 1   		       THEN 1 ELSE 0 end) CC_UR_LESS_THAN_PER_MONTHS_100_L12M
FROM ur 
GROUP BY RPT_DT, MSPHIEU, MA_CIC
) WITH DATA ;

UPDATE TPBRM1.CIC_FEATURE_STORE_KHCN x
SET 
 x.CC_UR_GREATER_THAN_PER_MONTHS_25_L3M  = y.CC_UR_GREATER_THAN_PER_MONTHS_25_L3M  
,x.CC_UR_GREATER_THAN_PER_MONTHS_25_L6M  = y.CC_UR_GREATER_THAN_PER_MONTHS_25_L6M  
,x.CC_UR_GREATER_THAN_PER_MONTHS_25_L12M = y.CC_UR_GREATER_THAN_PER_MONTHS_25_L12M 
,x.CC_UR_GREATER_THAN_PER_MONTHS_50_L3M  = y.CC_UR_GREATER_THAN_PER_MONTHS_50_L3M  
,x.CC_UR_GREATER_THAN_PER_MONTHS_50_L6M  = y.CC_UR_GREATER_THAN_PER_MONTHS_50_L6M  
,x.CC_UR_GREATER_THAN_PER_MONTHS_50_L12M = y.CC_UR_GREATER_THAN_PER_MONTHS_50_L12M 
,x.CC_UR_GREATER_THAN_PER_MONTHS_75_L3M  = y.CC_UR_GREATER_THAN_PER_MONTHS_75_L3M  
,x.CC_UR_GREATER_THAN_PER_MONTHS_75_L6M  = y.CC_UR_GREATER_THAN_PER_MONTHS_75_L6M  
,x.CC_UR_GREATER_THAN_PER_MONTHS_75_L12M = y.CC_UR_GREATER_THAN_PER_MONTHS_75_L12M 
,x.CC_UR_GREATER_THAN_PER_MONTHS_100_L3M = y.CC_UR_GREATER_THAN_PER_MONTHS_100_L3M 
,x.CC_UR_GREATER_THAN_PER_MONTHS_100_L6M = y.CC_UR_GREATER_THAN_PER_MONTHS_100_L6M 
,x.CC_UR_GREATER_THAN_PER_MONTHS_100_L12M= y.CC_UR_GREATER_THAN_PER_MONTHS_100_L12M
,x.CC_UR_LESS_THAN_PER_MONTHS_25_L3M     = y.CC_UR_LESS_THAN_PER_MONTHS_25_L3M     
,x.CC_UR_LESS_THAN_PER_MONTHS_25_L6M     = y.CC_UR_LESS_THAN_PER_MONTHS_25_L6M     
,x.CC_UR_LESS_THAN_PER_MONTHS_25_L12M    = y.CC_UR_LESS_THAN_PER_MONTHS_25_L12M    
,x.CC_UR_LESS_THAN_PER_MONTHS_50_L3M     = y.CC_UR_LESS_THAN_PER_MONTHS_50_L3M     
,x.CC_UR_LESS_THAN_PER_MONTHS_50_L6M     = y.CC_UR_LESS_THAN_PER_MONTHS_50_L6M     
,x.CC_UR_LESS_THAN_PER_MONTHS_50_L12M    = y.CC_UR_LESS_THAN_PER_MONTHS_50_L12M    
,x.CC_UR_LESS_THAN_PER_MONTHS_75_L3M     = y.CC_UR_LESS_THAN_PER_MONTHS_75_L3M     
,x.CC_UR_LESS_THAN_PER_MONTHS_75_L6M     = y.CC_UR_LESS_THAN_PER_MONTHS_75_L6M     
,x.CC_UR_LESS_THAN_PER_MONTHS_75_L12M    = y.CC_UR_LESS_THAN_PER_MONTHS_75_L12M    
,x.CC_UR_LESS_THAN_PER_MONTHS_100_L3M    = y.CC_UR_LESS_THAN_PER_MONTHS_100_L3M    
,x.CC_UR_LESS_THAN_PER_MONTHS_100_L6M    = y.CC_UR_LESS_THAN_PER_MONTHS_100_L6M    
,x.CC_UR_LESS_THAN_PER_MONTHS_100_L12M   = y.CC_UR_LESS_THAN_PER_MONTHS_100_L12M 
FROM SESSION.tmp_ur_12m y
WHERE x.RPT_DT = y.RPT_DT AND x.MSPHIEU = y.MSPHIEU AND x.MA_CIC = y.MA_CIC;


-- CLEAR TMP
DROP TABLE IF exists SESSION.tmp_han_muc_filter_date;
DROP TABLE IF exists SESSION.tmp_du_no_filter_date;
DROP TABLE IF exists SESSION.tmp_han_muc;
DROP TABLE IF exists SESSION.tmp_du_no;
DROP TABLE IF exists SESSION.tmp_du_no_12m;
DROP TABLE IF EXISTS SESSION.tmp_ur;
DROP TABLE IF EXISTS SESSION.tmp_ur_12m;

END